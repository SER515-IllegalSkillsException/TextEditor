diff --git a/src/main/java/controller/FileController.java b/src/main/java/controller/FileController.java
index 1744ebd..5a94a29 100644
--- a/src/main/java/controller/FileController.java
+++ b/src/main/java/controller/FileController.java
@@ -1,16 +1,23 @@
 package controller;
 
+import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
 
 import javax.swing.JFileChooser;
+import javax.swing.text.BadLocationException;
+import javax.swing.text.Document;
 
+import listener.TextChangeListener;
 import model.FileModel;
 
 /**
  * Controller for every action listener for file menu buttons
+ * 
  * @author vsriva12
  *
  */
@@ -18,26 +25,55 @@ public class FileController implements ControllerInterface {
 	/**
 	 * Function opens the user's home directory.
 	 */
-	public static void openFile(){
-		String fileName = FileModel.getInstance().getFilename();
+	public static void openFile() {
 		String filePath = FileModel.getInstance().getFilePath();
 		JFileChooser fileChooser = new JFileChooser();
 		File fileToOpen = null;
-		fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
+		if (filePath != null && !filePath.equals("")) {
+			fileChooser.setCurrentDirectory(new File(filePath));
+		} else {
+			fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
+		}
 		int result = fileChooser.showOpenDialog(null);
 		if (result == JFileChooser.APPROVE_OPTION) {
 			filePath = fileChooser.getSelectedFile().getAbsolutePath();
 			fileToOpen = new File(filePath);
+
+			System.out.println("Selected file: " + filePath);
+
+			FileReader fileReader;
+			try {
+				fileReader = new FileReader(fileToOpen);
+
+				BufferedReader reader = new BufferedReader(fileReader);
+				FileModel.getInstance().getTextArea().read(reader, "");
+				Document updatedDocument = FileModel.getInstance().getTextArea().getDocument();
+				updatedDocument.addDocumentListener(new TextChangeListener());
+				FileModel.getInstance().setContent(updatedDocument.getText(0, updatedDocument.getLength()));
+				reader.close();
+			} catch (FileNotFoundException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (BadLocationException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 			FileModel.getInstance().setFilePath(filePath);
 			FileModel.getInstance().setFilename(fileChooser.getSelectedFile().getName());
-			System.out.println("Selected file: " + filePath);
-		}
-		else
+
+		} else
 			System.out.println("User Cancelled Open");
 	}
+
 	/**
 	 * Function checks if a dialog box is required for saving or not.
-	 * @param isSaveAs flag which denotes if the save as button was clicked or just save button
+	 * 
+	 * @param isSaveAs
+	 *            flag which denotes if the save as button was clicked or just save
+	 *            button
 	 */
 	public static void saveFile(boolean isSaveAs) {
 		String fileName = FileModel.getInstance().getFilename();
@@ -47,6 +83,11 @@ public class FileController implements ControllerInterface {
 		File fileToSave = null;
 		if (fileName == null && filePath == null || isSaveAs) {
 			JFileChooser jFileChooser = new JFileChooser();
+			if (filePath != null && !filePath.equals("")) {
+				jFileChooser.setCurrentDirectory(new File(filePath));
+			} else {
+				jFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
+			}
 			int showSaveDialog = jFileChooser.showSaveDialog(null);
 			if (showSaveDialog == JFileChooser.APPROVE_OPTION) {
 				filePath = jFileChooser.getSelectedFile().getAbsolutePath();
@@ -60,7 +101,7 @@ public class FileController implements ControllerInterface {
 		} else {
 			fileToSave = new File(filePath);
 		}
-		
+
 		if (userConfirmedSave) {
 			try {
 				FileWriter fw = new FileWriter(fileToSave, false);
diff --git a/src/main/java/model/FileModel.java b/src/main/java/model/FileModel.java
index 485f224..28e2bea 100644
--- a/src/main/java/model/FileModel.java
+++ b/src/main/java/model/FileModel.java
@@ -1,5 +1,7 @@
 package model;
 
+import javax.swing.JTextArea;
+
 /**
  * Model class to store all information regarding the current file.
  * Data includes - filename, filepath, content of the file
@@ -11,6 +13,7 @@ public class FileModel implements ModelInterface {
     private String filename;
     private String filePath;
     private String content;
+    private JTextArea textArea;
     
     private FileModel() {
     	content = "";
@@ -50,6 +53,14 @@ public class FileModel implements ModelInterface {
 	public void setContent(String content) {
 		this.content = content;
 	}
+
+	public JTextArea getTextArea() {
+		return textArea;
+	}
+
+	public void setTextArea(JTextArea textArea) {
+		this.textArea = textArea;
+	}
     
     
 }
diff --git a/src/main/java/view/ViewFrame.java b/src/main/java/view/ViewFrame.java
index 19c323f..01552eb 100644
--- a/src/main/java/view/ViewFrame.java
+++ b/src/main/java/view/ViewFrame.java
@@ -5,6 +5,7 @@ import java.awt.*;
 import javax.swing.*;
 
 import constant.EditorConstants;
+import model.FileModel;
 
 /**
  * An Abstract Factory Pattern layout for the views all the View Frame has to do
@@ -35,6 +36,7 @@ public class ViewFrame extends JFrame {
 	 * Initializes all the component of the text editor and sets up the layout
 	 */
 	public void initializeView() {
+		setTitle("TextEditor");
 		headPanel = new JPanel();
 		BoxLayout boxlayout = new BoxLayout(headPanel, BoxLayout.Y_AXIS);
 		headPanel.setLayout(boxlayout);
diff --git a/src/main/java/view/ViewPanel/TextPanel.java b/src/main/java/view/ViewPanel/TextPanel.java
index 5aeced2..2011d53 100644
--- a/src/main/java/view/ViewPanel/TextPanel.java
+++ b/src/main/java/view/ViewPanel/TextPanel.java
@@ -1,6 +1,7 @@
 package view.ViewPanel;
 
 import listener.TextChangeListener;
+import model.FileModel;
 import view.AbstractViewPanel;
 
 import javax.swing.*;
@@ -25,6 +26,7 @@ public class TextPanel extends AbstractViewPanel {
         DocumentListener textChangeListener = new TextChangeListener();
         editableArea.getDocument().addDocumentListener(textChangeListener);
         textPane = new JScrollPane(editableArea);
+        FileModel.getInstance().setTextArea(editableArea);
 
 
     }
